import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
if(rootProject.extensions.extraProperties.has("enableIntune")) {
    apply plugin: 'com.microsoft.intune.mam'
}

boolean isFCMPushEnable() {
    if (rootProject.extensions.extraProperties.has("fcmEnable")) {
        String fcmEnable = "$rootProject.ext.fcmEnable";
        if ("Y" == fcmEnable) {
            return true
        }
    }
    return false;
}

void makeString() {
    String appName = rootProject.ext.appNameTl
    println("appName=" + appName)
    if (appName != null)
        appName = appName.replace("\\", "")
    String name_en = getLang("app_name", "en_US", appName);
    String result = "<resources>\n" +
            name_en +
            "</resources>"
    strToFile(result, "app/src/main/res/values-en/config_string.xml")

    String name_zh = getLang("app_name", "zh_CN", appName);
    String result_zh = "<resources>\n" +
            name_zh +
            "</resources>"
    strToFile(result_zh, "app/src/main/res/values/config_string.xml")
    strToFile(result_zh, "app/src/main/res/values-zh/config_string.xml")
}

String getLang(String key, String lang, String tabsLang0) {
    if (tabsLang0 == null) {
        return ""
    }
    String value = null
    JsonSlurper jsonSlurper = new JsonSlurper()
    ArrayList<Map<String, String>> re = jsonSlurper.parseText(tabsLang0)
    println("appName=" + re)
    if (re != null) {
        for (int i = 0; i < re.size(); i++) {
            if (lang.equals(re.get(i).get("lang"))) {
                value = re.get(i).get("appName")
                break;
            }
        }
    }
    if (value != null) {
        return "<string name=\"" + key + "\">" + value + "</string>"
    }
    return ""
}

ArrayList<String> getPluginDependencies() {
    if (rootProject.extensions.extraProperties.has("plugin_dependencies")) {
        String pluginDependencies = rootProject.ext.plugin_dependencies
        JsonSlurper jsonSlurper = new JsonSlurper()
        ArrayList<String> pluginDependencieList = jsonSlurper.parseText(pluginDependencies)
        return pluginDependencieList
    } else {
        return new ArrayList<String>()
    }

}

boolean isLibraryExist(String lib) {
    if (lib == null) {
        return false;
    }
    if (lib.equals(("$rootProject.ext.Tab0Lib") ||
            lib.equals("$rootProject.ext.Tab1Lib") ||
            lib.equals("$rootProject.ext.Tab2Lib") ||
            lib.equals("$rootProject.ext.Tab3Lib") ||
            lib.equals("$rootProject.ext.Tab4Lib") ||
            lib.equals("$rootProject.ext.Tab5Lib"))) {
        return true
    }
    return false
}
//用户没有选择标准组件而直接使用的自定义组件
boolean isProviderFileExist(String fileName, String originName) {
    String lib0Name = getLibName("$rootProject.ext.Tab0Lib"),
           lib1Name = getLibName("$rootProject.ext.Tab1Lib"),
           lib2Name = getLibName("$rootProject.ext.Tab2Lib"),
           lib3Name = getLibName("$rootProject.ext.Tab3Lib"),
           lib4Name = getLibName("$rootProject.ext.Tab4Lib"),
           lib5Name = getLibName("$rootProject.ext.Tab5Lib");
    if (isFileExist(lib0Name, originName, fileName)) {
        return true;
    }
    if (isFileExist(lib1Name, originName, fileName)) {
        return true;
    }
    if (isFileExist(lib2Name, originName, fileName)) {
        return true;
    }
    if (isFileExist(lib3Name, originName, fileName)) {
        return true;
    }
    if (isFileExist(lib4Name, originName, fileName)) {
        return true;
    }
    if (isFileExist(lib5Name, originName, fileName)) {
        return true;
    }
    return false;

}

boolean isFileExist(String libName, String originName, String fileName) {
    String filePath = libName + "/src/main/java/com/hand/" + libName + "/" + fileName;
    File file = new File(filePath);
    if (file.exists()) {
        return true;
    }
    String filePath2 = libName + "/src/main/java/com/hand/" + originName + "/" + fileName;
    File file2 = new File(filePath2);
    if (file2.exists()) {
        return true;
    }
    return false;
}

String getLibName(String srcLibName) {
    if (srcLibName != null) {
        return srcLibName.substring(1);
    } else {
        return null;
    }
}

void strToFile(String content, String targetPath) {
    try {
        File file = new File(targetPath);
        PrintStream printStream = new PrintStream(new FileOutputStream(file), true, "UTF-8");
        printStream.print(content);
        printStream.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk {
           /* if(rootProject.extensions.extraProperties.has("androidPadCompatible")&&
                    "N"==rootProject.extensions.extraProperties.get("androidPadCompatible")) {
                abiFilters "armeabi-v7a"
            }else{*/
                abiFilters "armeabi-v7a", "x86"
            //}
        }
        manifestPlaceholders = [
                SCHEME : rootProject.ext.applicationId.toLowerCase().replace(".",""),
        ]
    }
    signingConfigs {
        debug {
            //MD5: 5D:65:F4:B1:3C:4B:F4:99:E9:76:C5:88:A0:19:92:CB
            //SHA1: 14:CA:2D:2B:A5:70:9E:86:CD:48:4C:7E:2E:F7:2B:8A:CD:3B:1E:E8
            //SHA256: FF:72:30:04:EC:67:EF:09:D2:16:50:81:16:B9:A5:45:15:CE:0A:14:96:25:DD:36:8A:56:66:0C:AF:A5:57:F8
            storeFile file("../keystores/$rootProject.ext.KeyStore")
            keyAlias "$rootProject.ext.KeyStoreAlias"
            keyPassword "$rootProject.ext.KeyStoreAliasPassword"
            storePassword "$rootProject.ext.KeyStorePassword"
            v1SigningEnabled true
        }
        release {
            //MD5: 5D:65:F4:B1:3C:4B:F4:99:E9:76:C5:88:A0:19:92:CB
            //SHA1: 14:CA:2D:2B:A5:70:9E:86:CD:48:4C:7E:2E:F7:2B:8A:CD:3B:1E:E8
            //SHA256: FF:72:30:04:EC:67:EF:09:D2:16:50:81:16:B9:A5:45:15:CE:0A:14:96:25:DD:36:8A:56:66:0C:AF:A5:57:F8
            storeFile file("../keystores/$rootProject.ext.KeyStore")
            keyAlias "$rootProject.ext.KeyStoreAlias"
            keyPassword "$rootProject.ext.KeyStoreAliasPassword"
            storePassword "$rootProject.ext.KeyStorePassword"
            v1SigningEnabled true
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        makeString()
    }
    flavorDimensions 'h_1'
    productFlavors {
        hippius {
            dimension "h_1"
//            resValue("string", "app_name", rootProject.ext.appName)
        }
    }

    dexOptions {
        preDexLibraries = false
        maxProcessCount 8
        javaMaxHeapSize "4096m"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "com.hand.hippius:messages:${mavenGroupVersion}"
    implementation "com.hand.hippius:applications:${mavenGroupVersion}"
    implementation "com.hand.hippius:contacts:${mavenGroupVersion}"

    implementation "com.hand.hippius:mainlibrary:${mavenGroupVersion}"
    implementation "com.hand.hippius:pluginlibrary:${mavenGroupVersion}"
    implementation "com.hand.hippius:locationbridge:${mavenGroupVersion}"
   // implementation "com.hand.hippius:react_native:${mavenGroupVersion}"
    implementation "com.hand.hippius:runtime:${mavenGroupVersion}"
    implementation "com.hand.hippius:zxing:${mavenGroupVersion}"
    implementation "com.hand.hippius:voicerecbridge:${mavenGroupVersion}"
    implementation "com.hand.hippius:sslhandler:${mavenGroupVersion}"
    implementation project(':hippiusmoduledemo')
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.ext.libVersion.butterknife"
    api "com.alibaba:arouter-api:$rootProject.ext.libVersion.arouter_api"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.ext.libVersion.arouter_compiler"
    api 'androidx.multidex:multidex:2.0.0'

    implementation 'com.google.firebase:firebase-analytics:16.4.0'
    api 'com.google.firebase:firebase-messaging:17.6.0'
    api project(':hippiusmoduledemo')
    api project(':demoplugin')
    api project(':speedatauhfrfid')
    api project(':jlhmprinter')
}

if (isFCMPushEnable()) {
    apply plugin: 'com.google.gms.google-services'
}
if(rootProject.extensions.extraProperties.has("enableIntune")) {
    intunemam {
        report = true
        includeExternalLibraries = [
                "androidx.*"
        ]
    }
}
